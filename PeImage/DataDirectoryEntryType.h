#pragma once
namespace PeDecoder
{
	enum DataDirectoryEntryType :
		unsigned char
	{
		Export = IMAGE_DIRECTORY_ENTRY_EXPORT,
		Import = IMAGE_DIRECTORY_ENTRY_IMPORT,
		Resource = IMAGE_DIRECTORY_ENTRY_RESOURCE,
		Exception = IMAGE_DIRECTORY_ENTRY_EXCEPTION,
		Security = IMAGE_DIRECTORY_ENTRY_SECURITY,
		BaseReloc = IMAGE_DIRECTORY_ENTRY_BASERELOC,
		Debug = IMAGE_DIRECTORY_ENTRY_DEBUG,
		Architecture = IMAGE_DIRECTORY_ENTRY_ARCHITECTURE,
		Globalptr = IMAGE_DIRECTORY_ENTRY_GLOBALPTR,
		Tls = IMAGE_DIRECTORY_ENTRY_TLS,
		LoadConfig = IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG,
		BoundImport = IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT,
		Iat = IMAGE_DIRECTORY_ENTRY_IAT,
		DelayImport = IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT,
		ComDescriptor = IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR,
		_DataDirectoryEntryTypeBegin = Export,
		_DataDirectoryEntryTypeEnd = ComDescriptor
	};
	// 好像没啥用
	template<DataDirectoryEntryType id>
	struct DataDirectoryEntryTypeTrait;

#define DATA_DIRECTORY_ENTRY_TYPE_CONVERT(id,type) template<>\
	struct DataDirectoryEntryTypeTrait<DataDirectoryEntryType::id>\
	{\
		typedef type Type;\
	}
	// id-指针类型 对应表
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Export, PIMAGE_EXPORT_DIRECTORY);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Import, PIMAGE_IMPORT_DESCRIPTOR);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Resource, PIMAGE_RESOURCE_DIRECTORY);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Exception, PIMAGE_RUNTIME_FUNCTION_ENTRY);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Security, PVOID);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(BaseReloc, PIMAGE_BASE_RELOCATION);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Debug, PIMAGE_DEBUG_DIRECTORY);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Architecture, PIMAGE_ARCHITECTURE_HEADER);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Globalptr, PVOID);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Tls, PVOID);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(LoadConfig, PVOID);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(BoundImport, PIMAGE_BOUND_IMPORT_DESCRIPTOR);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(Iat, PVOID);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(DelayImport, PImgDelayDescr);
	DATA_DIRECTORY_ENTRY_TYPE_CONVERT(ComDescriptor, PIMAGE_COR20_HEADER);

}  // namespace PeDecoder
